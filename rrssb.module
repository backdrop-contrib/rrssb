<?php
/**
 * @file
 * Module file for Ridiculously Responsive Social Share Buttons.
 */

//@@TODO Create rrssb.api.inc 
 
require('rrssb.config.inc'); 
 
/**
 * Define the RRSSB library location.
 */
define('RRSSB_LIBRARY_VERSION', '1.8.1');
define('RRSSB_LIBRARY_URI', 'https://github.com/kni-labs/rrssb/archive/' . RRSSB_LIBRARY_VERSION . '.zip');

/**
 * Implements hook_menu().
 */
function rrssb_menu() {
  $items['admin/config/content/rrssb'] = array(
    'title' => 'Ridiculously Responsive Social Sharing Buttons',
    'description' => 'Configure the Ridiculously Responsive Social Sharing Buttons to select which social buttons you would like to enable.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rrssb_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer rrssb'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function rrssb_permission() {
  return array(
    'administer rrssb' => array(
      'title' => t('Administer RRSSB'),
      'description' => t('Permission to allow user to configure the Ridiculously Responsive Social Share Buttons.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function rrssb_theme($existing, $type, $theme, $path) {
  return array(
    'rrssb_config_buttons' => array(
      'render element' => 'element'
    ),
    'rrssb_button_list' => array(
      'render element' => 'element',
    ),
    'rrssb_button' => array(
      'variables' => array('name' => NULL, 'button' => NULL, 'vars' => NULL),
    ),
  );
}

/**
 * Theme function for rrssb_config_buttons.
 * Prints the table for the buttons config in the settings form.
 */
function theme_rrssb_config_buttons($variables) {
  $elements = $variables['element'];
  // Allow dragging of rows to set the weights, handled by javascript.
  drupal_add_tabledrag('rrssb_config_buttons', 'order', 'sibling', 'item-row-weight');
 
  $header = array(
    'label' => t('Button'), 
    'enabled' => t('Enabled'),
    // @@TODO Not sure if there is anywhere we can write a description '#description' => t('Username for your page/channel/profile.'),
    'username' => t('Username'),
    'weight' => t('Weight'),
  );
 
  $rows = array();
  foreach (element_children($elements) as $name) {
    $row = array('class' => array('draggable'));
    foreach ($header as $fieldname => $title) {
      $row['data'][] = drupal_render($elements[$name][$fieldname]);
    }
    $rows[] = $row;
  }
 
  return theme('table', array(
    'header' => $header, 
    'rows' => $rows,
    'attributes' => array('id' => 'rrssb_config_buttons'),
  ));
}

/**
 * Theme function for rrssb_button_list.
 * Prints the list of all buttons.
 */
function theme_rrssb_button_list($variables) {
  $output = '<div class=rrssb-item-list">';
  if ($prefix = variable_get('rrssb_prefix')) {
    $output .= '<span class="rrssb-prefix">' . t($prefix) . '</span>';
  }
  $output .= '<ul class="rrssb-buttons">';
  $output .= drupal_render_children($variables['element']);
  $output .= '</ul></div>';
  return $output;
}

/**
 * Preprocess function for rrssb_button. 
 */
function template_preprocess_rrssb_button(&$variables) {
  // Variables are $name, $button, $vars
  extract($variables, EXTR_REFS);
  $key = variable_get('rrssb_follow') ? 'follow_url' : 'share_url';
  $vars['username'] = $button['username'];
  $vars['link'] = preg_replace_callback('/{{(\w+)}}/', function ($matches) use($vars) { return $vars[$matches[1]]; }, $button[$key]);
}

/**
 * Theme function for rrssb_button. 
 * Prints a single button.
 */
function theme_rrssb_button($variables) {
  // Variables are $name, $button, $vars
  extract($variables);
  $icon = '/' . drupal_get_path('module', 'rrssb') . '/placeholder.png';
  $output = <<<EOM
<li class="rrssb-$name"><a href="$vars[link]" class="popup"><span class="rrssb-icon">$button[svg]</span><span class="rrssb-text">$button[text]</span></a></li>
EOM;
  return $output;
}

/**
 * Implements hook_block_info().
 */
function rrssb_block_info() {
  $blocks['rrssb'] = array(
    'info' => t('Ridiculously Responsive Social Share Buttons'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function rrssb_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'rrssb':
      $block['subject'] = t('Share this content.');
      $block['content'] = rrssb_get_buttons();
      break;
  }
  return $block;
}

/**
 * Implements hook_form().
 */
function rrssb_form() {
  $all_buttons = rrssb_settings(TRUE);
  $chosen = rrssb_get_chosen();
  $form['rrssb_follow'] = array(
    '#type' => 'select',
    '#title' => t('Select type of buttons'),
    '#options' => array(
      0 => t('Share'),
      1 => t('Follow'),
    ),
    '#default_value' => variable_get('rrssb_follow'),
    '#description' => t('"Share" buttons invite the visitor to share the page from your site onto their page/channel/profile.  "Follow" buttons direct the visitor to your page/channel/profile.'),
  );
  $form['rrssb_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix text before the buttons'),
    '#default_value' => variable_get('rrssb_prefix'),
    '#description' => t('Put this text before the buttons.  For example "Follow us" or "Share this page".'),
  );
  // Create the config for the table of buttons.
  // Drupal handles all the storing to the rrssb_chosen variable automatically, serialising the array.
  // The table layout comes from the theme function.
  $form['rrssb_chosen'] = array(
    '#tree' => TRUE,
    '#title' => t('Configure buttons'),
    '#theme' => 'rrssb_config_buttons',
  );
  foreach ($all_buttons as $name => $button) {
    // Determine if this button requires a particular value of rrssb_follow to be valid.
    // This is the case if one or other of the URL as not present.
    // Both URLs absent makes no sense and would be a bug.
    unset($require_follow);
    if (!isset($button['follow_url'])) {
      $require_follow = 0;
    }
    else if (!isset($button['share_url'])) {
      $require_follow = 1;
    }
    $form['rrssb_chosen'][$name]['label'] = array(
      '#type' => 'item',
      '#markup' => $name,
    );
    $form['rrssb_chosen'][$name]['enabled'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($chosen[$name]['enabled']) ? $chosen[$name]['enabled'] : FALSE,
    );
    if (isset($require_follow)) {
      $form['rrssb_chosen'][$name]['require_follow'] = array(
        '#type' => 'value',
        '#value' => $require_follow,
      );
      // Disable entries where there is no corresponding URL.
      $form['rrssb_chosen'][$name]['enabled']['#states'] = array(
        'enabled' => array(":input[name='rrssb_follow']" => array('value' => $require_follow))
      );
    }
    if (isset($button['follow_url'])) {
      $form['rrssb_chosen'][$name]['username'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($chosen[$name]['username']) ? $chosen[$name]['username'] : '',
        // Hide the username for share URLs where it isn't needed.  Otherwise it is a required field.
        // @@TODO Required field not working.
        '#states' => array(
          'visible' => array(":input[name='rrssb_follow']" => array('value' => 1)),
          'required' => array(":input[name='rrssb_chosen[$name][enabled]']" => array('checked' => TRUE)),
        ),
      );
    }
    $form['rrssb_chosen'][$name]['weight'] = array(
      '#type' => 'weight',
      '#default_value' => isset($chosen[$name]['weight']) ? $chosen[$name]['weight'] : 0,
      '#delta' => 10,
      '#attributes' => array('class' => array('item-row-weight')),
    ); 
  }
  $form['#submit'][] = 'rrssb_form_submit';
  $form['#validate'][] = 'rrssb_form_validate';
  return system_settings_form($form);
}

/**
 * Verify handler for rrssb_form().
 */
function rrssb_form_validate($form, &$form_state) {
  $follow = $form_state['values']['rrssb_follow'];
  $follow_text = $follow ? t('Follow') : t('Share');
  
  foreach ($form_state['values']['rrssb_chosen'] as $name => $settings) {
    if ($settings['enabled']) {
      if ($follow && !$settings['username']) {
        //@@TODO The form highlighting the error in red isn't working.
        form_set_error("rrssb_chosen[$name][username]", t('You must set the username to use "Follow" buttons'));
      }
      // If javascript is enabled, any field that has been grayed out by the #states disabled handler is automatically cleared upon submit.
      // However scripts might not be enabled, so double-check just in case. 
      if (isset($settings['require_follow']) && ($settings['require_follow'] != $follow)) {
        form_set_error("rrssb_chosen[$name][enabled]", t('!button button does not support "!follow" buttons', array('!button' => $name, '!follow' => $follow_text)));
      }    
    }
  }
}

/**
 * Submit handler for rrssb_form().
 */
function rrssb_form_submit() {
  // Clear cache;
  cache_clear_all('rrssb_buttons', 'cache');
}

/**
 * Implements hook_libraries_info().
 */
function rrssb_libraries_info() {
  $libraries['rrssb'] = array(
    'name' => 'Ridiculously Responsive Social Share Buttons',
    'vendor url' => 'http://kurtnoble.com/labs/rrssb/',
    'download url' => 'https://github.com/kni-labs/rrssb/archive/1.8.1.zip',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/"version": "([\d\.]+)"/',
    ),
    'files' => array(
      'js' => array(
        'js/rrssb.min.js',
      ),
      'css' => array(
        'css/rrssb.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_requirements().
 */
function rrssb_requirements($phase) {
  // Check for library version.  We do a runtime check only, as we don't want to block install - the normal sequence
  // is to install the module and then use the drush command to get the library. 
  $requirements = array();
  if ($phase == 'runtime') {
    $requirements['rrssb']['title'] = t('RRSSB library');
    $library = libraries_detect('rrssb');
    if (!$library['installed']) {
      $requirements['rrssb']['value'] = t('Not installed');
      $requirements['rrssb']['severity'] = REQUIREMENT_ERROR;
    }
    else {
      $requirements['rrssb']['value'] = $library['version'];
      
      if ($library['version'] < RRSSB_LIBRARY_VERSION) {
        $requirements['rrssb']['severity'] = REQUIREMENT_ERROR;
        $requirements['rrssb']['description'] = t('Library version is too old.  ');
      }
      else if ($library['version'] > RRSSB_LIBRARY_VERSION) {
        $requirements['rrssb']['severity'] = REQUIREMENT_WARNING;
        $requirements['rrssb']['description'] = t('Library version is newer than has been tested.  ');
      }
      else {
        $requirements['rrssb']['severity'] = REQUIREMENT_OK;
      }
    }
    
    if ($requirements['rrssb']['severity'] != REQUIREMENT_OK) {
      $requirements['rrssb']['description'] .= 
        t('Please download the RRSSB library using "drush rrssb-plugin" or from !link.', array('!link' => l(RRSSB_LIBRARY_URI, RRSSB_LIBRARY_URI)));
    }
  }
  return $requirements;
}

/**
 * Sets the current URL to be the shareable url.
 *
 * @param object $node
 *   A node object to grab the url from, or use the current path.
 *
 * @return string
 *   A url to pass to the share buttons.
 */
function rrssb_get_url($node = NULL) {
  $path = is_null($node) ? $_GET['q'] : 'node/' . $node->nid;
  return url($path, array('absolute' => TRUE));
}

/**
 * Gets the page title to share.
 *
 * @param object $node
 *   A node object to grab the title from, or get the current title.
 */
function rrssb_get_title($node = NULL) {
  return is_null($node) ? drupal_get_title() : $node->title;
}

/**
 * Return the chosen buttons, or the default values if not yet set.
 */
function rrssb_get_chosen() {
  $defaults = array(
    'email' => array('enabled' => TRUE),
    'facebook' => array('enabled' => TRUE),
    'linkedin' => array('enabled' => TRUE),
    'twitter' => array('enabled' => TRUE),
    'googleplus' => array('enabled' => TRUE),
    'pinterest' => array('enabled' => TRUE),
  );
  return variable_get('rrssb_chosen', $defaults);
}

/**
 * Returns a Drupal render array for the buttons.
 *
 * @param object $node
 *   The node object you are trying to share.
 *
 * @return string
 *   A string of markup for the list of buttons.
 */
function rrssb_get_buttons($node = NULL) {
  if (is_null($node)) {
    $node = menu_get_object();
  }

  $vars['url'] = check_plain(rrssb_get_url($node));
  $vars['title'] = urlencode(check_plain(rrssb_get_title($node)));
  $vars['image'] = NULL;
  drupal_alter('rrssb_image', $vars['image'], $node);
  
  $items = array('#theme' => 'rrssb_button_list');
  foreach (rrssb_settings() as $name => $button) {
    $items []= array(
      '#theme' => 'rrssb_button',
      '#name' => $name,
      '#button' => $button,
      '#vars' => $vars,
    );
  }
  
  // Add css and js here, so it's always available when we're showing buttons.
  // Don't have to worry about adding them more than once.
  libraries_load('rrssb');
  
  return $items;
}

/**
 * Implements hook_rrssb_image_alter().
 */
function rrssb_rrssb_image_alter(&$image, $node) {
  if (!isset($image)) {
    // Look for a field field_image.
    if (!empty($node->field_image)) {
      $image = file_create_url($node->field_image['und'][0]['uri']);
    }
    else {
      // Get the site logo as the default image.
      $image = theme_get_setting('logo');
      if (!isset($image)) {
        $image = 'https://www.drupal.org/files/druplicon.large_.png';
      }
    }
  }
}

/**
 * Fetch buttons settings.
 *
 * @param boolean $all TRUE: Fetch all buttons.  FALSE: only fetch enabled buttons.
 *
 * @return array Key is button name, value is an array of button config and settings merged.
 * For config values, see hook_rrssb_buttons.
 * Settings values are 'enabled', 'weight', 'username'. 
 */
function rrssb_settings($all = FALSE) {
  // The 'all buttons' case is only used on the settings form, so performance isn't so important.
  // Do a static cache, but be careful to use a different entry.  Don't bother with a database cache.
  $buttons = &drupal_static($all ? __FUNCTION__ : __FUNCTION__ . '__all');
  if (isset($buttons)) {
    return $buttons;
  }
  
  if (!$all && $cache = cache_get('rrssb_buttons')) {
    $buttons = $cache->data;
    return $buttons;
  }
  
  // Get all buttons.
  $chosen = rrssb_get_chosen();
  $defaults = array('enabled' => FALSE, 'weight' => 0, 'username' => '');
  $buttons = module_invoke_all('rrssb_buttons');
  drupal_alter('rrssb_buttons', $buttons);
  
  // Set some defaults.
  foreach ($buttons as $name => &$button) {
    // Merge in the current config, with suitable defaults and checking.
    $button += $chosen[$name];
    $button += $defaults;
    $button['username'] = check_plain($button['username']);
    
    // Default text to name.
    if (!isset($button['text'])) {
      $button['text'] = $name;
    }
  }

  // Sort buttons by configured weight.
  uasort($buttons, 'drupal_sort_weight');
  
  if (!$all) {
    // Filter to only include enabled ones.
    $buttons = array_filter($buttons, function($button) { return $button['enabled']; });
    cache_set('rrssb_buttons', $buttons);
  }
  
  return $buttons;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rrssb_form_node_type_form_alter(&$form, &$form_state) {
  $form['rrssb'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ridiculously Responsive Social Share Buttons'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#weight' => 20,
    '#attributes' => array(
      'class' => array('rrssb-node-type-settings-form'),
    ),
    '#access' => user_access('administer nodes'),
  );
  $form['rrssb']['show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show the social buttons?'),
    '#default_value' => variable_get('rrssb_' . $form['#node_type']->type, 0),
  );
  $form['#submit'][] = 'rrssb_node_type_callback';
}

/**
 * Custom handler to save rrssb info.
 */
function rrssb_node_type_callback($form, &$form_state) {
  variable_set('rrssb_' . $form_state['values']['type'], $form_state['complete form']['rrssb']['show']['#value']);
  field_info_cache_clear();
}

/**
 * Implements hook_node_prepare().
 */
function rrssb_node_prepare($node) {
  // @@TODO: Testing and code read suggests this function may not be needed - remove or add comment to explain.
  if (!isset($node->rrssb)) {
    $node->rrssb = variable_get("rrssb_{$node->type}", 0);
  }
}

/**
 * Implements hook_node_view().
 */
function rrssb_node_view($node, $view_mode, $langcode) {
  if (variable_get('rrssb_' . $node->type) == 1) {
    $node->content['rrssb'] = rrssb_get_buttons($node);
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function rrssb_field_extra_fields() {
  $extra = array();
  foreach (node_type_get_types() as $node_type) {
    if (variable_get('rrssb_' . $node_type->type) == 1) {
      $extra['node'][$node_type->type]['display']['rrssb'] = array(
        'label' => t('Ridiculously Responsive Social Share Buttons'),
        'description' => t('A fake field to display Social buttons'),
        'weight' => 10,
      );
    }
  }

  return $extra;
}
